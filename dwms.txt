from sklearn import *

from sklearn.datasets import load_iris
import matplotlib.pyplot as plt

iris = load_iris()
X = iris.data

from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=2)
kmeans.fit(X)

plt.scatter(X[:, 0], X[:, 1], c=kmeans.labels_, s=50, alpha=0.5)

# Highlight the centroids
centroids = kmeans.cluster_centers_
plt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, c='black')

plt.show()




from sklearn.datasets import load_iris
from sklearn import tree
from sklearn import *
iris = load_iris()
X, y = iris.data, iris.target
clf = tree.DecisionTreeClassifier()
clf = clf.fit(X, y)
tree.plot_tree(clf)




!pip install scikit-learn-extra
from sklearn.datasets import load_iris

iris = load_iris()
X = iris.data

from sklearn_extra.cluster import KMedoids

# Create the KMedoids object and fit it to the data
kmedoids = KMedoids(n_clusters=3, random_state=0).fit(X)

import matplotlib.pyplot as plt

# Plot the results
plt.scatter(X[:, 0], X[:, 1], c=kmedoids.labels_, s=50, alpha=0.5)

# Highlight the centroids
centroids = kmedoids.cluster_centers_
plt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, c='black')

plt.legend()
plt.show()




import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB

# Load the Iris dataset
iris = load_iris()

# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.25, random_state=42)

# Create a Gaussian Naive Bayes classifier
clf = GaussianNB()

# Train the classifier on the training set
clf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Evaluate the model performance
from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test, y_pred)

print("Accuracy:", accuracy)
